services:
  user-service:
    build:
      context: /user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: on-failure
    ports:
      - "8081:8081"
    networks:
      - blog-network
    environment:
      SPRING.DATASOURCE.URL: jdbc:mysql://mysql:3306/userdb
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eurekaserver:8761/eureka/
    depends_on:
      mysql:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy

  blog-service:
    build:
      context: /blog-service
      dockerfile: Dockerfile
    container_name: blog-service
    restart: on-failure
    ports:
      - "8082:8082"
    networks:
      - blog-network
    environment:
      SPRING.DATASOURCE.URL: jdbc:mysql://mysql:3306/blogdb
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eurekaserver:8761/eureka/
    depends_on:
      mysql:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy

  mysql:
    image: mysql:8.1
    container_name: mysql
    ports:
      - "3307:3306"
    networks:
      - blog-network
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    healthcheck:
      test: [ "CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]
      timeout: 20s
      retries: 10
    volumes:
      - ./user-service/src/main/resources/scripts/mysql.sql:/docker-entrypoint-initdb.d/mysql.sql
      - mysql-data-volume:/var/lib/mysql

  sonarqube:
    image: sonarqube:9-community
    container_name: sonarqube
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "9000:9000"
    networks:
      - blog-network
    environment:
      - SONARQUBE_JDBC_URL=jdbc:mysql://mysql-db:3306/sonarqubedb?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
      - sonarqube_config:/opt/sonarqube/conf

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.24
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - blog-network
    volumes:
      - elasticsearch-data-volume:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:9200" ]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.24
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - blog-network
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

  eurekaserver:
    build:
      context: /eureka-service
      dockerfile: Dockerfile
    container_name: eurekaserver
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: on-failure
    networks:
      - blog-network

  kafka:
    image: 'bitnami/kafka:3.8.1'
    ports:
      - '9094:9094'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_CONTROLLER_BROKER_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    networks:
      - blog-network
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server kafka:9092 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    ports:
      - '8090:8080'
    depends_on:
      kafka:
        condition: service_healthy
    environment:
       KAFKA_CLUSTERS_0_NAME: local
       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - blog-network

volumes:
  mysql-data-volume:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonarqube_config:
  elasticsearch-data-volume:

networks:
  blog-network:
    driver: bridge